/** \brief Search for k-nearest neighbors using the spatial locator from
  * \a setSearchmethod, and the given surface from \a setSearchSurface.
  * \param[in] cloud the query point cloud
  * \param[in] index the index of the query point in \a cloud
  * \param[in] parameter the search parameter (either k or radius)
  * \param[out] indices the resultant vector of indices representing the k-nearest neighbors
  * \param[out] distances the resultant vector of distances representing the distances from the query point to the
  * k-nearest neighbors
  *
  * \return the number of neighbors found. If no neighbors are found or an error occurred, return 0.
*/
inline int
searchForNeighbors (const PointCloudIn &cloud, std::size_t index, double parameter,
                  pcl::Indices &indices, std::vector<float> &distances) const
{
return (search_method_surface_ (cloud, index, parameter, indices, distances));
}



pcl/common/include/pcl/impl/point_types.hpp

#define PCL_ADD_EIGEN_MAPS_NORMAL4D \
  inline pcl::Vector3fMap getNormalVector3fMap () { return (pcl::Vector3fMap (data_n)); } \
  inline pcl::Vector3fMapConst getNormalVector3fMap () const { return (pcl::Vector3fMapConst (data_n)); } \
  inline pcl::Vector4fMap getNormalVector4fMap () { return (pcl::Vector4fMap (data_n)); } \
  inline pcl::Vector4fMapConst getNormalVector4fMap () const { return (pcl::Vector4fMapConst (data_n)); }

#define PCL_ADD_EIGEN_MAPS_POINT4D \
  inline pcl::Vector3fMap getVector3fMap () { return (pcl::Vector3fMap (data)); } \
  inline pcl::Vector3fMapConst getVector3fMap () const { return (pcl::Vector3fMapConst (data)); } \
  inline pcl::Vector4fMap getVector4fMap () { return (pcl::Vector4fMap (data)); } \
  inline pcl::Vector4fMapConst getVector4fMap () const { return (pcl::Vector4fMapConst (data)); } \
  inline pcl::Array3fMap getArray3fMap () { return (pcl::Array3fMap (data)); } \
  inline pcl::Array3fMapConst getArray3fMap () const { return (pcl::Array3fMapConst (data)); } \
  inline pcl::Array4fMap getArray4fMap () { return (pcl::Array4fMap (data)); } \
  inline pcl::Array4fMapConst getArray4fMap () const { return (pcl::Array4fMapConst (data)); }


/usr/include/eigen3/Eigen/src/Core/Matrix.h
/** \defgroup matrixtypedefs Global matrix typedefs
  *
  * \ingroup Core_Module
  *
  * Eigen defines several typedef shortcuts for most common matrix and vector types.
  *
  * The general patterns are the following:
  *
  * \c MatrixSizeType where \c Size can be \c 2,\c 3,\c 4 for fixed size square matrices or \c X for dynamic size,
  * and where \c Type can be \c i for integer, \c f for float, \c d for double, \c cf for complex float, \c cd
  * for complex double.
  *
  * For example, \c Matrix3d is a fixed-size 3x3 matrix type of doubles, and \c MatrixXf is a dynamic-size matrix of floats.
  *
  * There are also \c VectorSizeType and \c RowVectorSizeType which are self-explanatory. For example, \c Vector4cf is
  * a fixed-size vector of 4 complex floats.
  *
  * \sa class Matrix
  */
Vector3f : is a fixed_size vector of 3 floats.


向量点乘（内积）和叉乘（外积、向量积）概念及几何意义解读
https://blog.csdn.net/dcrmg/article/details/52416832
求解三维空间中两向量之间的夹角
https://blog.csdn.net/l1216766050/article/details/99713052


下面这段代码中的radii_interval_, theta_divisions_, phi_divisions_ 这三个成员属性在initCompute中初始化。
// Compute the Bin(j, k, l) coordinates of current neighbour
const auto rad_min = std::lower_bound(std::next (radii_interval_.cbegin ()), radii_interval_.cend (), r);
const auto theta_min = std::lower_bound(std::next (theta_divisions_.cbegin ()), theta_divisions_.cend (), theta);
const auto phi_min = std::lower_bound(std::next (phi_divisions_.cbegin ()), phi_divisions_.cend (), phi);

关于ShapeContext1980
1980指的是该descriptor由1980个bins组成
radius_bins_ = 15 （相当于15个半径不等的同心球）
elevation_bins_ = 11 （俯仰角[0,180]）
azimuth_bins_ = 12 （转动角[0,360]，相当于每30°一个划分）
// volume_lut stand for volume look up table
volume_lut_ = (radius_bins_ * elevation_bins_ * azimuth_bins_)
若转换成3-d张量应该是这个结构：volume_lut_[elevation_bins_][radius_bins_][azimuth_bins_]
